@page "/users/edit/{Id}"
@attribute [Authorize]
@inject IAlertService AlertService
@inject IAccountService AccountService
@inject NavigationManager NavigationManager

<h1>Edit User</h1>
@if (model != null && Otp == 1)
{
    <EditForm Model="@model" OnValidSubmit="UpdateOtp">
        <DataAnnotationsValidator />
        <div class="form-row">
            <div class="form-group col">
                <label>Full Name</label>
                <InputText @bind-Value="model.Name" class="form-control" />
                <ValidationMessage For="@(() => model.Name)" />
            </div>
            <div class="form-group col">
                <label>Last Name</label>
                <InputText @bind-Value="model.Address" class="form-control" />
                <ValidationMessage For="@(() => model.Address)" />
            </div>
        </div>
        <div class="form-row">
            <div class="form-group col">
                <label>Username</label>
                <InputText @bind-Value="model.Email" class="form-control" />
                <ValidationMessage For="@(() => model.Email)" />
            </div>
            <div class="form-group col">
                <label>
                    Password
                    <em>(Leave blank to keep the same password)</em>
                </label>
                <InputText @bind-Value="model.Password" type="password" class="form-control" />
                <ValidationMessage For="@(() => model.Password)" />
            </div>
        </div>
        <div class="form-group">
            <button disabled="@loading" class="btn btn-primary">
                @if (loading) 
                {
                    <span class="spinner-border spinner-border-sm mr-1"></span>
                }
                Save
            </button>
            <NavLink href="users" class="btn btn-link">Cancel</NavLink>
        </div>
    </EditForm>
}
else if(Otp == 2)
{
<div class="card">
    <h4 class="card-header">Register</h4>
    <div class="card-body">
        <EditForm Model="@model" OnValidSubmit="OnValidSubmit">
            <DataAnnotationsValidator />
            <div class="form-group">
                <label>verify OTP</label>
                <InputText @bind-Value="model.Code" type="number" class="form-control" />
                @* <ValidationMessage For="@(() => model.Password)" /> *@
            </div>
            <button disabled="@loading" class="btn btn-primary">
                @if (loading) 
                {
                    <span class="spinner-border spinner-border-sm mr-1"></span>
                }
                verify OTP
            </button>
            <NavLink href="account/login" class="btn btn-link">Cancel</NavLink>
        </EditForm>
    </div>
</div>
}

else
{
    <div class="text-center p-3">
        <span class="spinner-border spinner-border-lg align-center"></span>
    </div>
}

@code {
    private User model;
    private bool loading;

    [Parameter]
    public string Id { get; set; }
    int Otp = 1;

    protected override async Task OnInitializedAsync()
    {
        var user = await AccountService.GetById(Id);
        model = new User(user);
    }
     private async void UpdateOtp()
    {
        

        // reset alerts on submit
        AlertService.Clear();
        
        loading = true;
        try
        {
            await AccountService.UpdateOtp(Id, model);
            Otp = 2;
            loading = false;
            StateHasChanged();
        }
        catch (Exception ex)
        {
            AlertService.Error(ex.Message);
            loading = false;
            StateHasChanged();
        }
       
    }

    private async void OnValidSubmit()
    {
    loading = true;

    if(model.Code != null)
     {
        try
        {
            await AccountService.Update(Id, model);
            AlertService.Success("Update successful", keepAfterRouteChange: true);
            NavigationManager.NavigateTo("/");
        }
        catch (Exception ex)
        {
            AlertService.Error(ex.Message);
            loading = false;
            StateHasChanged();
        }
    }
    }
}