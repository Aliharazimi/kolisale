@page "/account/forgot-password"
@layout MainLayout
@inject IAccountService AccountService
@inject IAlertService AlertService
@inject NavigationManager NavigationManager

@if(aiki==1)
{
<div class="card">
    <h4 class="card-header">fogot</h4>
    <div class="card-body">
        <EditForm Model="@model" >
            <DataAnnotationsValidator />
            <div class="form-group">
                <label>Username/Email</label>
                <InputText @bind-Value="model.Email" class="form-control" />
                <ValidationMessage For="@(() => model.Email)" />
            </div>
            <button @onclick="OnValidSubmit" type="submit" disabled="@loading" class="btn btn-primary">
                @if (loading) 
                {
                    <span class="spinner-border spinner-border-sm mr-1"></span>
                }
                Submit
            </button>
        </EditForm>
    </div>
</div>
}
else if(aiki==2)
{
<div class="card">
    <h4 class="card-header">OTP</h4>
    <div class="card-body">
        <EditForm Model="@model" OnValidSubmit="OnValidOtp">
            <DataAnnotationsValidator />
            <div class="form-group">
                <label>Insert OTP</label>
                <InputText @bind-Value="model.Code" class="form-control" />
                <ValidationMessage For="@(() => model.Code)" />
            </div>
            <button disabled="@loading" class="btn btn-primary">
                @if (loading) 
                {
                    <span class="spinner-border spinner-border-sm mr-1"></span>
                }
                Submit
            </button>
        </EditForm>
    </div>
</div>

}

else if(aiki==3)
{
<div class="card">
    <h4 class="card-header">New Password</h4>
    <div class="card-body">
        <EditForm Model="@model" OnValidSubmit="OnValidOtp">
            <DataAnnotationsValidator />
            <div class="form-group">
                <label>New Password</label>
                <InputText @bind-Value="model.Password" class="form-control" />
                <ValidationMessage For="@(() => model.Password)" />
            </div>
            <div class="form-group">
                <label>Repeat Password</label>
                <InputText @bind-Value="model.Password" class="form-control" />
                <ValidationMessage For="@(() => model.Password)" />
            </div>
            <button disabled="@loading" class="btn btn-primary">
                @if (loading) 
                {
                    <span class="spinner-border spinner-border-sm mr-1"></span>
                }
                Submit
            </button>
        </EditForm>
    </div>
</div>

}

@code {
    private Models.User model = new Models.User();
    private bool loading;
    int aiki=1;
    string damuwa="";

    private async void OnValidSubmit()
    {
        Console.WriteLine("An fara aiki:"+model.Email);
        Console.WriteLine("An fara aiki:"+model.Email);
        // reset alerts on submit
        AlertService.Clear();

        loading = true;
        try
        {
           var shi = await AccountService.GetByEmail(model.Email);
           if(shi.Email != null)
           {
            aiki = 2;
           }
           else
           { 
            aiki =1;
            damuwa = "Account does not exist";
           }
           StateHasChanged();
        }
        catch (Exception ex)
        {
            AlertService.Error(ex.Message);
            loading = false;
            StateHasChanged();
        }
    }

    private async void OnValidOtp()
    {
        // reset alerts on submit
        AlertService.Clear();

        loading = true;
        try
        {
           var shi = await AccountService.VerifyOtp(model.Email ,model.Code);
           if(shi)
           {
            aiki = 3;
           }
           else
           { 
            aiki =2;
            damuwa = "Otp is wrong";
           }
           StateHasChanged();
        }
        catch (Exception ex)
        {
            AlertService.Error(ex.Message);
            loading = false;
            StateHasChanged();
        }
    }
    private async void OnValidNewPin()
    {
        // reset alerts on submit
        AlertService.Clear();

        loading = true;
        try
        {
           var shi = await AccountService.UpdatePassword(model.Email ,model.Password);
           if(shi)
           {
            aiki = 4;
           }
           else
           { 
            aiki =3;
            damuwa = "Password update failed";
           }
           StateHasChanged();
        }
        catch (Exception ex)
        {
            AlertService.Error(ex.Message);
            loading = false;
            StateHasChanged();
        }
    }
}